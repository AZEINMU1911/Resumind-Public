datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enum to define the user roles for the paywall
enum UserRole {
  FREE
  PAID
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  username  String   @unique
  email     String   @unique
  password  String
  role      UserRole @default(FREE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // --- Relations ---
  cvs             CV[]
  jobDescriptions JobDescription[]
  analyses        Analysis[]
}

model CV {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  originalName String
  fileUrl      String    @unique
  isGuest      Boolean   @default(false)
  expiresAt    DateTime? // We'll use this field later for a cleanup job

  // --- Relations ---
  userId       String?   @db.ObjectId
  user         User?     @relation(fields: [userId], references: [id])
  analysis     Analysis?

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model JobDescription {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  company        String
  originalText   String
  parsedKeywords String[]
  isGuest        Boolean   @default(false)
  expiresAt      DateTime?

  // --- Relations ---
  userId         String?   @db.ObjectId
  user           User?     @relation(fields: [userId], references: [id])
  analyses       Analysis[]

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

enum AnalysisType {
  CV_ANALYSIS
  JOB_MATCH_ANALYSIS
}

model Analysis {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  type      AnalysisType
  status    String
  result    Json
  isGuest   Boolean      @default(false)
  expiresAt DateTime?

  // --- Relations ---
  userId    String?      @db.ObjectId
  user      User?        @relation(fields: [userId], references: [id])

  cvId      String       @unique @db.ObjectId
  cv        CV           @relation(fields: [cvId], references: [id])

  jobDescriptionId String?      @db.ObjectId
  jobDescription   JobDescription? @relation(fields: [jobDescriptionId], references: [id])

  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

